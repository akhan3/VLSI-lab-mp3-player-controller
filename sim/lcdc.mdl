-------------------------------------------------------------------------------
-- Project                    : MP3 Player Controller
-- Entity                     : lcdc_mdl
-- Entity description         : LCD controller simulation model.
--                              Contains two RAMs
--
-- Author                     : AAK
-- Created on                 : 24 Jan, 2009
-- Last revision on           : 24 Jan, 2009
-- Last revision description  :
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
-- use ieee.numeric_std.all;
-- use std.textio.all;
use work.test_util.all;
use work.system_constants_pkg.all;

entity lcdc is
  generic(
    tclock : time -- clock frequency in this simulation
  );
  port(
    clk                 : in  std_logic;
    reset               : in  std_logic;

    chrm_wr             : in  std_logic;
    chrm_wdata          : in  std_logic_vector(7 downto 0);
    chrm_addr           : in  std_logic_vector(7 downto 0);

    ccrm_wr             : in  std_logic;
    ccrm_wdata          : in  std_logic_vector(35 downto 0);
    ccrm_addr           : in  std_logic_vector(4 downto 0);

    lcdc_cmd            : in  std_logic_vector(1 downto 0);
    lcdc_busy           : out std_logic := '0'
  );
end entity;

architecture behav of lcdc is
  constant LCD_LENGTH     : positive := 32;
  subtype lcd_char_type   is character;
  type    lcd_str_array   is array(1 to LCD_LENGTH) of lcd_char_type;
  type    char_mem_array  is array(0 to 255)  of std_logic_vector(7 downto 0);
  type    cc_mem_array    is array(0 to 31)   of std_logic_vector(35 downto 0);
  signal  char_mem        : char_mem_array; -- Character RAM 256x8
  signal  cc_mem          : cc_mem_array;   -- Character Command RAM 32x36

begin

-------------------------------------------------------------------------------
-- Write into the character memory
-------------------------------------------------------------------------------
  process (clk, reset)
  begin
    if (reset = reset_state) then
      for i in 0 to 255 loop
        char_mem(i) <= x"20"; -- fill with spaces on reset
      end loop;
    elsif (clk'event and clk = clk_polarity) then
      if (lcdc_cmd = LCD_CLEAR) then
        for i in 0 to 255 loop
          char_mem(i) <= x"20"; -- fill with spaces on LCD_CLEAR command
        end loop;
      elsif (chrm_wr = '1') then
        char_mem(conv_integer(chrm_addr)) <= chrm_wdata;
      end if;
    end if;
  end process;

-------------------------------------------------------------------------------
-- Write into the character-command memory
-------------------------------------------------------------------------------
  process (clk, reset)
  begin
    if (reset = reset_state) then
      cc_mem(0) <= x"883E0001F";
      for i in 1 to 31 loop
        cc_mem(i) <= x"000000000";
      end loop;
    elsif (clk'event and clk = clk_polarity) then
      if (ccrm_wr = '1') then
        cc_mem(conv_integer(ccrm_addr)) <= ccrm_wdata;
      end if;
    end if;
  end process;

-------------------------------------------------------------------------------
-- busy status of the LCD
-------------------------------------------------------------------------------
--   lcdc_busy <= '1' when ( clk'event and clk = clk_polarity and
--                           (lcdc_cmd = LCD_REFRESH or lcdc_cmd = LCD_CLEAR)  ) else
--                500*tclock + 3 ns;

-------------------------------------------------------------------------------
-- LCD display process
-------------------------------------------------------------------------------
  lcd_display_algo: process
    variable  cc_word     : std_logic_vector(35 downto 0);
    variable  v           : bit;
    variable  ctr         : bit;
    variable  cpos        : natural;
    variable  clth        : natural;
    variable  cbad        : natural;
    variable  csad        : natural;
    variable  wlth        : natural;
    variable  addr        : natural;
    variable  lcdpos      : natural;
    variable  lcd_char    : lcd_char_type;
    variable  lcd_string  : lcd_str_array;
  begin
    wait until (  (reset = reset_state) or
                  (clk'event and clk = clk_polarity and lcdc_cmd = LCD_REFRESH) );
    if (reset = reset_state) then
      lcdc_busy <= '0';
      for i in 1 to LCD_LENGTH loop
        lcd_string(i) := ' ';
      end loop;
    elsif (clk'event and clk = clk_polarity and lcdc_cmd = LCD_REFRESH) then
      lcdc_busy <= '1';
      -- refresh algo starts here
      for i in 0 to (LCD_LENGTH - 1) loop
        cc_word := cc_mem(i);
        v := to_bit(cc_word(35));
        if (v = '1') then
          ctr := to_bit(cc_word(31));
          cpos := conv_integer(cc_word(30 downto 26));
          clth := conv_integer(cc_word(25 downto 21));
          cbad := conv_integer(cc_word(20 downto 13));
          csad := conv_integer(cc_word(12 downto 5));
          wlth := conv_integer(cc_word(4 downto 0));
          addr := csad;
          lcdpos := cpos;
          for j in 0 to clth loop
            lcd_char := character'val(conv_integer(char_mem(addr)));
            lcd_string(lcdpos + 1) := lcd_char;
            if (ctr = '0') then
              if (lcdpos = 0) then
                lcdpos := 31;
              else
                lcdpos := lcdpos - 1;
              end if;
            else
              if (lcdpos = 31) then
                lcdpos := 0;
              else
                lcdpos := lcdpos + 1;
              end if;
            end if; -- ctr
            if (addr = csad + wlth) then
              addr := cbad;
            else
              addr := addr + 1;
            end if; -- addr
            wait until (clk'event and clk = clk_polarity);
          end loop; -- j
        end if; -- v
        wait until (clk'event and clk = clk_polarity);
      end loop; -- i
      -- refresh algo finished
      display_msg(string'("Line 1 [") & string(lcd_string(1 to 16)) & string'("]"));
      display_msg(string'("Line 2 [") & string(lcd_string(17 to 32)) & string'("]"));
      display_msg(string'(""));
      lcdc_busy <= '0' after 10*tclock + 3 ns;
    end if;
  end process;


end architecture;
